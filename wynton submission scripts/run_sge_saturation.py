#!/usr/bin/env python3
"""
Wrapper script to run saturation mutagenesis as SGE array job on Wynton.
This integrates with prepare_batch_saturation.py output.

Usage:
    # Option 1: Use the command file generated by prepare_batch_saturation.py
    python run_sge_saturation.py --from-command positions_batch_command.sh [--submit]
    
    # Option 2: Provide parameters directly
    python run_sge_saturation.py --pdb 41D1.pdb --residues "SB133 GB134" --partners AB_C [--submit]
    
    # Option 3: Extract from prepare_batch_saturation.py output
    python prepare_batch_saturation.py positions.txt 41D1.pdb | python run_sge_saturation.py --parse-output [--submit]

The --submit flag will automatically submit the job to SGE.
"""

import sys
import os
import re
import subprocess
import argparse

def parse_batch_command_file(command_file):
    """Extract parameters from batch_command.sh file"""
    with open(command_file, 'r') as f:
        content = f.read()
    
    # Find the python command line
    match = re.search(r'python3?\s+batch_saturation\.py\s+(\S+)\s+"([^"]+)"\s+(\S+)', content)
    if not match:
        raise ValueError(f"Could not parse command from {command_file}")
    
    pdb_file = match.group(1)
    residue_list = match.group(2)
    partner_info = match.group(3)
    
    return pdb_file, residue_list, partner_info

def parse_prepare_output(output_text):
    """Parse output from prepare_batch_saturation.py"""
    pdb_file = None
    residue_list = None
    partner_info = None
    
    for line in output_text.split('\n'):
        if line.startswith('PDB file:'):
            pdb_file = line.split(':', 1)[1].strip()
        elif line.startswith('Residue list:'):
            residue_list = line.split(':', 1)[1].strip()
        elif line.startswith('Partner info:'):
            partner_info = line.split(':', 1)[1].strip()
        elif line.startswith('python') and 'batch_saturation.py' in line:
            # Also try to parse from command line
            match = re.search(r'python3?\s+batch_saturation\.py\s+(\S+)\s+"([^"]+)"\s+(\S+)', line)
            if match:
                pdb_file = match.group(1)
                residue_list = match.group(2)
                partner_info = match.group(3)
    
    return pdb_file, residue_list, partner_info

def main():
    parser = argparse.ArgumentParser(description='Run saturation mutagenesis as SGE array job')
    
    # Input options
    input_group = parser.add_mutually_exclusive_group(required=True)
    input_group.add_argument('--from-command', metavar='FILE', 
                            help='Read parameters from batch_command.sh file')
    input_group.add_argument('--parse-output', action='store_true',
                            help='Parse parameters from prepare_batch_saturation.py output on stdin')
    input_group.add_argument('--pdb', metavar='FILE',
                            help='PDB file (use with --residues and --partners)')
    
    # Additional parameters for direct input
    parser.add_argument('--residues', metavar='LIST',
                       help='Space-separated list of residues (e.g., "SB133 GB134")')
    parser.add_argument('--partners', metavar='INFO',
                       help='Partner info (e.g., "AB_C")')
    
    # Options
    parser.add_argument('--job-name', metavar='NAME',
                       help='SGE job name (default: derived from PDB file)')
    parser.add_argument('--submit', action='store_true',
                       help='Automatically submit the job to SGE')
    parser.add_argument('--time', metavar='HH:MM:SS', default='01:00:00',
                       help='Wall time limit (default: 01:00:00)')
    parser.add_argument('--mem', metavar='SIZE', default='4G',
                       help='Memory per task (default: 4G)')
    
    args = parser.parse_args()
    
    # Get parameters based on input method
    if args.from_command:
        pdb_file, residue_list, partner_info = parse_batch_command_file(args.from_command)
    elif args.parse_output:
        output = sys.stdin.read()
        pdb_file, residue_list, partner_info = parse_prepare_output(output)
        if not all([pdb_file, residue_list, partner_info]):
            print("Error: Could not parse all required parameters from input")
            print(f"  PDB file: {pdb_file}")
            print(f"  Residues: {residue_list}")
            print(f"  Partners: {partner_info}")
            sys.exit(1)
    else:
        # Direct input
        if not all([args.pdb, args.residues, args.partners]):
            print("Error: When using --pdb, must also provide --residues and --partners")
            sys.exit(1)
        pdb_file = args.pdb
        residue_list = args.residues
        partner_info = args.partners
    
    # Validate we have all required parameters
    if not pdb_file or not residue_list or not partner_info:
        print("Error: Missing required parameters")
        print(f"  PDB file: {pdb_file}")
        print(f"  Residues: {residue_list}")
        print(f"  Partners: {partner_info}")
        sys.exit(1)
    
    # Check if PDB file exists
    if not os.path.exists(pdb_file):
        print(f"Error: PDB file '{pdb_file}' not found")
        sys.exit(1)
    
    # Generate job name
    if args.job_name:
        job_name = args.job_name
    else:
        job_name = os.path.splitext(os.path.basename(pdb_file))[0] + "_sat"
    
    # Clean job name for SGE (remove special characters)
    job_name = job_name.replace('.', '_').replace('-', '_')
    
    # SGE job names cannot start with a digit - prefix with 'job_' if needed
    if job_name and job_name[0].isdigit():
        job_name = 'job_' + job_name
    
    print(f"\n=== Preparing SGE Saturation Mutagenesis Job ===")
    print(f"PDB file: {pdb_file}")
    print(f"Partner info: {partner_info}")
    print(f"Job name: {job_name}")
    
    # Count residues
    residues = residue_list.split()
    print(f"Number of residues: {len(residues)}")
    print(f"Total mutations: {len(residues) * 19}")
    
    # Run prepare_sge_saturation.py
    cmd = [
        'python3', 'prepare_sge_saturation.py',
        pdb_file,
        residue_list,
        partner_info,
        job_name
    ]
    
    print(f"\nRunning: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"Error running prepare_sge_saturation.py:")
        print(result.stderr)
        sys.exit(1)
    
    print(result.stdout)
    
    # Modify the submission script if custom time/memory requested
    if args.time != '01:00:00' or args.mem != '4G':
        submit_script = f"submit_{job_name}.sh"
        with open(submit_script, 'r') as f:
            content = f.read()
        
        # Update time and memory
        content = re.sub(r'#\$ -l h_rt=\S+', f'#$ -l h_rt={args.time}', content)
        content = re.sub(r'#\$ -l mem_free=\S+', f'#$ -l mem_free={args.mem}', content)
        
        with open(submit_script, 'w') as f:
            f.write(content)
        
        print(f"\nUpdated resource requirements:")
        print(f"  Wall time: {args.time}")
        print(f"  Memory: {args.mem}")
    
    # Submit if requested
    if args.submit:
        submit_script = f"submit_{job_name}.sh"
        print(f"\nSubmitting job to SGE...")
        result = subprocess.run(['qsub', submit_script], capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"Job submitted successfully!")
            print(result.stdout)
            
            # Extract job ID
            match = re.search(r'Your job-array (\d+)\.', result.stdout)
            if match:
                job_id = match.group(1)
                print(f"\nJob ID: {job_id}")
                print(f"Check status with: qstat -u $USER")
                print(f"Check detailed status with: ./check_{job_name}_status.sh")
        else:
            print(f"Error submitting job:")
            print(result.stderr)
    else:
        print(f"\nTo submit the job manually:")
        print(f"  qsub submit_{job_name}.sh")

if __name__ == "__main__":
    main() 