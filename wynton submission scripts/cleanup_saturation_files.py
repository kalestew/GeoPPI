#!/usr/bin/env python3
"""
Clean up all files generated by the saturation mutagenesis workflow.

Usage:
    python cleanup_saturation_files.py [--dry-run] [--keep-results]
    
Options:
    --dry-run       Show what would be deleted without actually deleting
    --keep-results  Keep the final combined results CSV files
"""

import os
import sys
import glob
import argparse

def find_saturation_files():
    """Find all files generated by the saturation mutagenesis workflow"""
    
    files_to_remove = []
    
    # Pattern categories
    patterns = {
        'Submit scripts': ['submit_*_sat.sh', 'submit_job_*_sat.sh'],
        'Residue lists': ['*_sat_residues.txt', 'job_*_sat_residues.txt'],
        'Status scripts': ['check_*_sat_status.sh', 'check_job_*_sat_status.sh'],
        'Combine scripts': ['combine_*_sat_results.py', 'combine_job_*_sat_results.py'],
        'Log files': ['logs/*_sat_*.log', 'logs/*_sat_task_*.log'],
        'Individual results': ['results/*_sat/*.csv', 'results/job_*_sat/*.csv'],
        'Combined results': ['*_sat_all_results.csv', 'job_*_sat_all_results.csv'],
        'Command files': ['*_batch_command.sh', '*_saturation_summary.txt'],
    }
    
    categorized_files = {}
    
    for category, pattern_list in patterns.items():
        categorized_files[category] = []
        for pattern in pattern_list:
            files = glob.glob(pattern)
            categorized_files[category].extend(files)
            files_to_remove.extend(files)
    
    # Also find result directories
    result_dirs = glob.glob('results/*_sat') + glob.glob('results/job_*_sat')
    
    return categorized_files, result_dirs, files_to_remove

def main():
    parser = argparse.ArgumentParser(description='Clean up saturation mutagenesis files')
    parser.add_argument('--dry-run', action='store_true', help='Show what would be deleted without deleting')
    parser.add_argument('--keep-results', action='store_true', help='Keep the final combined results CSV files')
    
    args = parser.parse_args()
    
    print("=== Saturation Mutagenesis File Cleanup ===\n")
    
    categorized_files, result_dirs, all_files = find_saturation_files()
    
    # If keeping results, remove them from the deletion list
    if args.keep_results:
        print("Keeping combined result files...")
        for f in categorized_files['Combined results'][:]:
            if f in all_files:
                all_files.remove(f)
        categorized_files['Combined results'] = []
    
    # Display files by category
    total_files = 0
    for category, files in categorized_files.items():
        if files:
            print(f"{category}:")
            for f in sorted(files)[:5]:  # Show first 5 files
                print(f"  - {f}")
            if len(files) > 5:
                print(f"  ... and {len(files) - 5} more")
            print(f"  Total: {len(files)} files")
            print()
            total_files += len(files)
    
    # Display directories
    if result_dirs:
        print("Result directories:")
        for d in sorted(result_dirs)[:5]:
            num_files = len(glob.glob(f"{d}/*.csv"))
            print(f"  - {d} ({num_files} files)")
        if len(result_dirs) > 5:
            print(f"  ... and {len(result_dirs) - 5} more")
        print(f"  Total: {len(result_dirs)} directories")
        print()
    
    if total_files == 0 and not result_dirs:
        print("No saturation mutagenesis files found to clean up.")
        return
    
    print(f"Total files to remove: {total_files}")
    print(f"Total directories to remove: {len(result_dirs)}")
    
    if args.dry_run:
        print("\n[DRY RUN] No files were deleted.")
        return
    
    # Confirm deletion
    print("\nAre you sure you want to delete these files?")
    response = input("Type 'yes' to confirm: ")
    
    if response.lower() != 'yes':
        print("Cleanup cancelled.")
        return
    
    # Delete files
    deleted_count = 0
    for f in all_files:
        try:
            os.remove(f)
            deleted_count += 1
        except FileNotFoundError:
            pass  # File already deleted
        except Exception as e:
            print(f"Error deleting {f}: {e}")
    
    # Delete directories
    deleted_dirs = 0
    for d in result_dirs:
        try:
            # First remove all files in the directory
            for f in glob.glob(f"{d}/*"):
                try:
                    os.remove(f)
                except:
                    pass
            # Then remove the directory
            os.rmdir(d)
            deleted_dirs += 1
        except Exception as e:
            print(f"Error deleting directory {d}: {e}")
    
    print(f"\nDeleted {deleted_count} files and {deleted_dirs} directories.")
    
    # Clean up empty logs directory if it exists
    if os.path.exists('logs') and not os.listdir('logs'):
        try:
            os.rmdir('logs')
            print("Removed empty logs directory.")
        except:
            pass

if __name__ == "__main__":
    main() 